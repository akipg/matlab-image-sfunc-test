%% File : test.tlc
%% Created : Sat Aug 24 03:35:06 2024
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "test.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  test "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    %assign uint64Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT64)
    %assign intType = LibGetDataTypeNameFromId(::CompiledModel.tSS_INTEGER)
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

  %assign y0DT = FixPt_GetOutputDataType(0)
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "test_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void test_Outputs_wrapper_accel(const %<realType> *u0,
			%<uint64Type> *y0,
			%<realType> *y1,
			const %<realType> *p0, const %<intType> p_width0);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "test_accel_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void test_Start_wrapper(const %<realType> *p0, const %<intType> p_width0);
    extern void test_Outputs_wrapper(const %<realType> *u0,
			%<uint64Type> *y0,
			%<realType> *y1,
			const %<realType> *p0, const %<intType> p_width0);
    extern void test_Terminate_wrapper(const %<realType> *p0, const %<intType> p_width0);
    void test_Outputs_wrapper_accel(const %<realType> *u0,
			%<uint64Type> *y0,
			%<realType> *y1,
			const %<realType> *p0, const %<intType> p_width0){
    test_Outputs_wrapper(u0,
			y0,
			y1,
			p0, p_width0);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
    %assign hFileName = "test_cgen_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void test_Outputs_wrapper_cgen(const %<realType> *u0,
			%<uint64Type> *y0,
			%<realType> *y1,
			const %<realType> *p0, const %<intType> p_width0);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "test_cgen_wrapper"
    %openfile cFile = "%<cFileName>.cpp"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"

	extern void test_Outputs_wrapper(const %<realType> *u0,
			%<uint64Type> *y0,
			%<realType> *y1,
			const %<realType> *p0, const %<intType> p_width0);
	 void test_Outputs_wrapper_cgen(const %<realType> *u0,
			%<uint64Type> *y0,
			%<realType> *y1,
			const %<realType> *p0, const %<intType> p_width0) {
	test_Outputs_wrapper(u0,
			y0,
			y1,
			p0, p_width0);
	}
    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %openfile externs

    %assign y0DT = FixPt_GetOutputDataType(0)
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void test_Start_wrapper(const %<realType> *p0, const %<intType> p_width0);

    SFB_EXTERN_C void test_Outputs_wrapper(const %<realType> *u0,
			%<uint64Type> *y0,
			%<realType> *y1,
			const %<realType> *p0, const %<intType> p_width0);

    SFB_EXTERN_C void test_Terminate_wrapper(const %<realType> *p0, const %<intType> p_width0);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    test_Outputs_wrapper_accel(%<pu0>, %<py0>, %<py1>, %<pp1>, %<param_width1>);
  %else
    test_Outputs_wrapper_cgen(%<pu0>, %<py0>, %<py1>, %<pp1>, %<param_width1>);
  %endif

  %%
%endfunction


%% [EOF] test.tlc

